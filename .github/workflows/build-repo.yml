name: Build and Sign Debian Repository

on:
  push:
    branches: [main]
    paths:
      - 'pool/**'
  workflow_dispatch:

env:
  DIST: stable
  COMPONENT: main
  ARCH: amd64

jobs:
  setup-gpg:
    runs-on: ubuntu-latest
    outputs:
      gpg-key-id: ${{ steps.setup-keys.outputs.key-id }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup GPG keys
        id: setup-keys
        run: |
          if [ -f "KEY.gpg" ]; then
            echo "‚úÖ Using existing GPG key"
            gpg --import KEY.gpg
            KEY_ID=$(gpg --list-keys --with-colons | grep '^fpr:' | head -1 | cut -d':' -f10)
            echo "key-id=$KEY_ID" >> $GITHUB_OUTPUT
          else
            echo "üîê Generating new GPG key..."
            echo -e "Key-Type: RSA\nKey-Length: 4096\nName-Real: NAS Repository\nName-Email: nas-repo@users.noreply.github.com\nExpire-Date: 0" > gpg-input
            echo "%no-protection" >> gpg-input
            echo "%commit" >> gpg-input
            
            gpg --batch --generate-key gpg-input
            KEY_ID=$(gpg --list-keys --with-colons | grep '^fpr:' | head -1 | cut -d':' -f10)
            gpg --armor --export "$KEY_ID" > KEY.gpg
            echo "key-id=$KEY_ID" >> $GITHUB_OUTPUT
            echo "‚úÖ Generated new GPG key: $KEY_ID"
            rm gpg-input
          fi

      - name: Upload GPG key
        uses: actions/upload-artifact@v4
        with:
          name: gpg-key
          path: KEY.gpg

  build-repository:
    runs-on: ubuntu-latest
    needs: setup-gpg
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download GPG key
        uses: actions/download-artifact@v4
        with:
          name: gpg-key
          path: .

      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y reprepro gnupg apt-utils

      - name: Setup GPG environment
        run: |
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg
          
          gpg --import KEY.gpg
          KEY_FPR=$(gpg --list-keys --with-colons | grep '^fpr:' | head -1 | cut -d':' -f10)
          echo "üîë GPG Key Fingerprint: $KEY_FPR"
          echo "$KEY_FPR:6:" | gpg --import-ownertrust
          echo "‚úÖ GPG key setup complete"

      - name: Setup repository structure
        run: |
          mkdir -p conf
          
          KEY_FPR=$(gpg --list-keys --with-colons | grep '^fpr:' | head -1 | cut -d':' -f10)
          echo "üîë Using GPG key: $KEY_FPR"
          
          # TWORZENIE PLIKU distributions BEZ HEREDOC
          echo "Origin: NAS Repository" > conf/distributions
          echo "Label: NAS Debian Repository" >> conf/distributions
          echo "Codename: ${{ env.DIST }}" >> conf/distributions
          echo "Architectures: ${{ env.ARCH }}" >> conf/distributions
          echo "Components: ${{ env.COMPONENT }}" >> conf/distributions
          echo "Description: Repository for NAS applications" >> conf/distributions
          echo "SignWith: $KEY_FPR" >> conf/distributions
          
          echo "basedir $(pwd)" > conf/options

      - name: Add packages to repository
        run: |
          rm -rf db dists 2>/dev/null || true
          
          find pool -name "*.deb" | while read deb_file; do
            echo "üì¶ Adding package: $deb_file"
            reprepro --ignore=wrongdistribution includedeb ${{ env.DIST }} "$deb_file" || \
            reprepro --ignore=undefinedtarget includedeb ${{ env.DIST }} "$deb_file" || \
            echo "‚ö†Ô∏è  Failed to add: $deb_file"
          done

      - name: Export repository
        run: |
          if reprepro export ${{ env.DIST }}; then
            echo "‚úÖ Repository exported successfully"
          else
            echo "‚ùå Export failed, creating manual repository"
            ./scripts/create-simple-repo.sh
          fi

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: .
          keep_files: true

      - name: Verify deployment
        run: |
          echo "‚úÖ Repository deployed to GitHub Pages"
